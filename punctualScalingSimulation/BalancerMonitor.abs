module BalancerMonitor;

export *;
import * from EmailProcessingPipelineArchitecture;

interface LoadBalancerMonitorInterface{
  Unit check();
}

class LoadBalancerMonitor(LoadBalancer balancer, String balancerName, Rat computationalLoad, Int deplN, Rat multFactor, Rat windowDim) implements LoadBalancerMonitorInterface {
  Int deployment_number = deplN;
  ScalingWrapper sw;
  Rat ksmall = rat(0.015) * windowDim * multFactor;
  Rat kbig =  rat(0.045) * windowDim * multFactor;
  {sw = new ScalingWrapperImpl(balancer);}

  Unit check() {
    Float aat = await balancer!averageTime();
    Int completed = await balancer!completed();
    Int total = await balancer!arrived();
    Int lost = await balancer!lost();
    Int pending = await balancer!pending();
    if(total - ((computationalLoad * deployment_number) - kbig)  > ksmall || ((computationalLoad * deployment_number) - kbig) - total > ksmall) {
      Float val = float((total + kbig)/ computationalLoad);
      Int toDeploy = ceil(val);
      if(toDeploy > deployment_number) {sw!deploy(toDeploy - deployment_number);}
      else if(toDeploy < deployment_number && deployment_number >= deplN) {sw!undeploy(deployment_number - toDeploy);}
      deployment_number = toDeploy;
    }
    balancer!resetMetrics();
  }
}

interface ScalingWrapper {
  Unit deploy(Int n);
  Unit undeploy(Int n);
}

class ScalingWrapperImpl(LoadBalancer balancer) implements ScalingWrapper{
  Unit deploy(Int n) {
    Int times = n;
    await duration(150,150);
    while(times != 0) {
      balancer!deploy();
      times = times - 1;
    }
  }

  Unit undeploy(Int n) {
    Int times = n;
    while(times != 0) {
      balancer!undeploy();
      times = times - 1;
    }
  }
}
