module BalancerMonitor;

export *;
import * from EmailProcessingPipelineArchitecture;

interface LoadBalancerMonitorInterface{
  Unit check();
}

class LoadBalancerMonitor(LoadBalancer balancer, String balancerName, Rat computationalLoad, Int deplN, Rat multFactor) implements LoadBalancerMonitorInterface {
  Int deployment_number = deplN;
  ScalingWrapper sw;
  Rat ksmall = 13 * multFactor;
  Rat kbig =  39 * multFactor;
  {sw = new ScalingWrapperImpl(balancer);}

  Unit check() {
    Float aat = await balancer!averageTime();
    Rat completed = await balancer!completed();
    completed = completed / 10;
    Rat total = await balancer!arrived();
    total = total / 10;
    Rat lost = await balancer!lost();
    lost = lost / 10;
    Rat pending = await balancer!pending();
    pending = pending / 10;
    //println(balancerName + " " + toString(float(total)) + " " + toString(float(lost)));
    if(total - ((computationalLoad * deployment_number) - kbig)  > ksmall || ((computationalLoad * deployment_number) - kbig) - total > ksmall) {
      Float val = float((total + kbig)/ computationalLoad);
      Int integerVal = truncate(rat(val));
      Rat diff = rat(val) - integerVal;
      if(diff > 0) {integerVal = integerVal + 1;}
      Int toDeploy = integerVal;
      if(toDeploy > deployment_number) {sw!deploy(toDeploy - deployment_number);}
      else if(toDeploy < deployment_number && deployment_number >= deplN) {sw!undeploy(deployment_number - toDeploy);}
      deployment_number = toDeploy;
    }
    balancer!resetMetrics();
  }
}

interface ScalingWrapper {
  Unit deploy(Int n);
  Unit undeploy(Int n);
}

class ScalingWrapperImpl(LoadBalancer balancer) implements ScalingWrapper{
  Unit deploy(Int n) {
    Int times = n;
    while(times != 0) {
      balancer!deploy();
      times = times - 1;
    }
  }

  Unit undeploy(Int n) {
    Int times = n;
    while(times != 0) {
      balancer!undeploy();
      times = times - 1;
    }
  }
}
